
nokube_cluster_name: home-ray
apiVersion: apps/v1
kind: Deployment
metadata:
  name: git-watcher
  namespace: nokube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: git-watcher
  template:
    metadata:
      labels:
        app: git-watcher
    spec:
      containers:
      - name: git-watcher
        image: nokube/git-watcher:latest
        env:
        - name: CONFIG_PATH
          value: "/app/config/repos.yaml"
        - name: LOG_LEVEL
          value: "INFO"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /app/data
        - name: ssh-keys
          mountPath: /app/ssh
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config-volume
        secret:
          secretName: git-watcher-config
      # 不再挂载凭据文件，全部在 repos.yaml 内内联提供
      - name: data-volume
        persistentVolumeClaim:
          claimName: git-watcher-data
---
apiVersion: v1
kind: Service
metadata:
  name: git-watcher-service
  namespace: nokube-system
spec:
  selector:
    app: git-watcher
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: git-watcher-config
  namespace: nokube-system
type: Opaque
stringData:
  # 注意：仓库配置中的认证信息不放在这里，令牌通过 Secret 注入 GITHUB_TOKEN
  repos.yaml: |
    repositories:
      - name: "example-app"
        url: "https://github.com/example/example-app.git"
        branch: "main"
          path: "k8s/"
        deployment_name: "example-app"
        namespace: "default"
        check_interval: 300
        auth:
            type: "https"  # 令牌通过环境变量 GITHUB_TOKEN 提供
      
      - name: "microservice-api"
        url: "https://github.com/example/microservice-api.git"
        branch: "develop"
        path: "deploy/"
        deployment_name: "api-service"
        namespace: "api"
        check_interval: 600
        auth:
          type: "ssh"
          # 与下方 ssh-keys Secret 挂载到 /app/ssh 匹配
          key_path: "/app/ssh/id_rsa"
    
    global:
      check_interval: 300
      max_workers: 5
      log_level: "INFO"
      storage:
        type: "file"
        path: "/app/data/watcher-state.json"
      
      notifications:
        email:
          enabled: false
          smtp_server: "smtp.gmail.com"
          smtp_port: 587
          username: "your-email@gmail.com"
          password: "your-password"
        
        webhook:
          enabled: true
          url: "https://hooks.slack.com/services/xxx"
          events: ["config_change", "deploy_success", "deploy_failed"]
---
apiVersion: v1
kind: Secret
metadata:
  name: git-watcher-config
  namespace: nokube-system
type: Opaque
stringData:
  # repos.yaml（含认证信息，已按你的要求内联到配置中统一管理）
  repos.yaml: |
    repositories:
      - name: "example-app"
        url: "https://github.com/example/example-app.git"
        branch: "main"
        path: "k8s/"
        deployment_name: "example-app"
        namespace: "default"
        check_interval: 300
        auth:
          type: "https"
          # 直接在配置里写 token（按你的要求）
          token: "<your-https-token>"
      
      - name: "microservice-api"
        url: "https://github.com/example/microservice-api.git"
        branch: "develop"
        path: "deploy/"
        deployment_name: "api-service"
        namespace: "api"
        check_interval: 600
        auth:
          type: "ssh"
          # 直接在配置里写 SSH 私钥（PEM 格式，包含 -----BEGIN/END-----，支持多行）
          ssh_key: |
            -----BEGIN OPENSSH PRIVATE KEY-----
            <...>
            -----END OPENSSH PRIVATE KEY-----
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: git-watcher-data
  namespace: nokube-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi 